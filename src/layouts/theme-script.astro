<script>
document.addEventListener('astro:page-load', () => {
  const primaryColorScheme = '' // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem('theme')

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme)
      return currentTheme

    // return primary color scheme if it is set
    if (primaryColorScheme)
      return primaryColorScheme

    // return user device's prefer color scheme
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light'
  }

  let themeValue = getPreferTheme()

  function setPreference() {
    localStorage.setItem('theme', themeValue)
    reflectPreference()
  }

  function reflectPreference() {
    document.documentElement.setAttribute('data-theme', themeValue)
    const reverseThemeValue = themeValue === 'dark' ? 'light' : 'dark'
    document.documentElement.classList.remove(reverseThemeValue)
    document.documentElement.classList.add(themeValue)

    document.querySelector('#theme-btn')?.setAttribute('aria-label', themeValue)
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference()

  // now this script can find and listen for clicks on the control
  document.querySelector('#theme-btn')?.addEventListener('click', event => {
    toggleDark(event as MouseEvent)
  })

  // sync with system changes
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', ({ matches: isDark }) => {
      themeValue = isDark ? 'dark' : 'light'
      setPreference()
    })

  /**
   * Credit to [@hooray](https://github.com/hooray)
   * @see https://github.com/vuejs/vitepress/pull/2347
   */
  function toggleDark(event: MouseEvent) {
    const isDark = themeValue === 'dark'

    // @ts-expect-error experimental API
    const isAppearanceTransition = document.startViewTransition
      && !window.matchMedia('(prefers-reduced-motion: reduce)').matches
      && !!event

    if (!isAppearanceTransition) {
      toggle()
      return
    }

    const x = event.clientX
    const y = event.clientY
    const endRadius = Math.hypot(
      Math.max(x, innerWidth - x),
      Math.max(y, innerHeight - y),
    )
    document.documentElement.classList.add('theme-clip')
    // @ts-expect-error: Transition API
    const transition = document.startViewTransition(() => {
      toggle()
    })
    transition.ready
      .then(() => {
        const clipPath = [
          `circle(0px at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ]
        document.documentElement.animate(
          {
            clipPath: isDark
              ? [...clipPath].reverse()
              : clipPath,
          },
          {
            duration: 400,
            easing: 'ease-out',
            pseudoElement: isDark
              ? '::view-transition-old(root)'
              : '::view-transition-new(root)',
          },
        )
      })

    transition.finished
      .then(() => {
        document.documentElement.classList.remove('theme-clip')
      })

    function toggle() {
      themeValue = themeValue === 'light' ? 'dark' : 'light'
      setPreference()
    }
  }
  window.toggleDark = toggleDark
})

function setTheme() {
  const currentTheme = localStorage.getItem('theme')
  if (currentTheme === 'dark')
    document.documentElement.classList.add('dark')
  else
    document.documentElement.classList.remove('dark')
}

document.addEventListener('astro:after-swap', () => {
  setTheme()
})

setTheme()
</script>
  <script is:inline>
  const currentTheme = localStorage.getItem('theme')
  if (currentTheme === 'dark')
    document.documentElement.classList.add('dark')
  else
    document.documentElement.classList.remove('dark')
  </script>
